#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# License holder: DR34M-M4K3R#7751

echo "NEW: JOIN THE DISCORD! [https://discord.gg/FPhHhBG25d]"
#IMPORTS
#NONE YET
#COMMAND
clear

#COLORS
#RED = \e[1;31m
#BLUE = \e[34m
#END = \e[0m

#COLORS2
red='\e[1;31m'
yellow='\e[0;33m'
Blue='\e[1;34m'

# ROOT
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root"
  echo "Your not rooted, please root your Terminal."
  exit 1
fi


# QUIT FUNCTION
function quit (){
  echo -e "\e[1;31m STOPPING ANONSURF... PLEASE WAIT \e[0m"
  echo ""
  cd
  cd /root/kali-anonsurf/
  anonsurf stop
  echo ""
  echo -e "\e[1;31m[*] ANONSURF DISABLED\e[0m"
  echo ""

  echo -e "\e[1;31m THANKS FOR USING GHOST RECON! \e[0m"

  exit 2
}

# CATCH CTRL
trap "quit" 2

function banner
{
  clear
  echo "
                                ____ _               _   ____
                               / ___| |__   ___  ___| |_|  _ \ V.1.2___ ___  _ __
                              | |  _| '_ \ / _ \/ __| __| |_) / _ \/ __/ _ \| '_ \.
                   /\.        | |_| | | | | (_) \__ \ |_|  _ <  __/ (_| (_) | | | |
                  /**\.        \____|_| |_|\___/|___/\__|_| \_\___|\___\___/|_| |_|
                 /****\   /\.  DEVELOPER: MZZGAMER | MAINTAINER: DR43M-M4K3R
                /      \ /**\.
               /  /\    /    \        /\    /\  /\      /\            /\/\/\  /\.
              /  /  \  /      \      /  \/\/  \/  \  /\/  \/\  /\  /\/ / /  \/  \.
             /  /    \/ /\     \    /    \ \  /    \/ /   /  \/  \/  \  /    \   \.
            /  /      \/  \/\   \  /      \    /   /    \.
         __/__/_______/___/__\___\__________________________________________________."
  echo -e "\e[34m                        GhostRecon: investigate, search, anonymously.\e[0m"
  echo -e "\e[1;31m                              !!!  TYPE -h TO SEE COMMANDS  !!!\e[0m"
  echo -e "\e[1;31m                              !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  \e[0m"
  echo ""
  echo ""
  echo ""
}
banner

function help
{
  echo -e "
  ABOUT:
  \e[31m GhostRecon is compact OSINT tool for OSINT investigators.
  Developer: \e[0m mZzgamerDEV
  \e[31mStatus: \e[0m Still under developement, script taken over by DR34M-M4K3R \e[0m



  <core_commands>

  \e[31m domain_scanner \e[0m           \e[34m Search all possible information for Domains. \e[0m
  \e[31m IP_scanner \e[0m               \e[34m Search all possible information from an IP Address. \e[0m
  \e[31m phone_scanner \e[0m            \e[34m Search all possible information from a phone number. \e[0m
  \e[31m email_scanner \e[0m            \e[34m Search all possible information from an email. \e[0m
  \e[31m email_socialscan \e[0m         \e[34m Detects Instagram, Twitter and Snapchat registration from an email. \e[0m
  \e[31m link_scanner \e[0m             \e[34m Sniff all links from a Domain. \e[0m
  \e[31m bitcoin_scanner \e[0m          \e[34m Search all bitcoin wallets addresses from target. \e[0m
  \e[31m criminal_scanner \e[0m         \e[34m Search if somone is recoreded as a criminal on all the USA. \e[0m
  \e[31m person_finder (in dev)\e[0m    \e[34m [in developement]Advanced search on internet for a person
                                        by giving multiple personal inforations. \e[0m

  <sub_commands>

  \e[31m hide identity \e[0m        \e[34m enable anonimity (will hide your identity) \e[0m
  \e[31m unhide identity \e[0m      \e[34m disable anonimity (Will not hide your identity) \e[0m
  \e[31m check status \e[0m         \e[34m Check Anonimity status. \e[0m
  \e[31m clear \e[0m                \e[34m Clear terminal. \e[0m
  \e[31m update \e[0m               \e[34m Update tool. \e[0m
  \e[31m banner \e[0m               \e[34m To spawn banner. \e[0m
  \e[31m exit \e[0m                 \e[34m Exit the tool \e[0m
  \e[31m -h, --help \e[0m           \e[34m shows this help and exists. \e[0m
  \e[31m -v  --version \e[0m        \e[34m shows the version of the program and exists. \e[0m
  \e[31m uninstall \e[0m            \e[34m Wipe out your hard drive from any trace of Ghostrecon and his dependencies \e[0m
  \e[31m show_path \e[0m            \e[34m Show the path of your GhostRecon directory. \e[0m
  \e[31m reinstall \e[0m            \e[34m Install again Grecon and all his dependencies




  \e[31mDON'T FORGET \"hide identity\" TO HIDE YOUR IP!
  (CTRL+C  or \"exit\" to exit)
  DON'T FORGET TO UPDATE THE TOOL MULTIPLE TIME A DAY AND JOIN THE DISCORD \e[0m"
  echo ""
  echo ""
}


a1='clear' ##
a2='banner' ##
a3='update' ##
a4='hide identity'
a5='unhide identity'
a6='check status'
a7='exit'
a8='uninstall'
a9='show_path'
a10='reinstall'
#####################
b1='-v' ##
b2='-h' ##
b3='--help' ##
b4='--version' ##
b5='domain_scanner' #
b6='IP_scanner' #
b7='phone_scanner'
b8='email_scanner'
b9='email_socialscan'
b10='link_scanner'
b11='bitcoin_scanner'
b12='criminal_scanner'
b13='person_finder'

echo -e "\e[1;31m [*] INITIALISATION...\e[0m"

pathtogrecon=$(find /home/ -type d -iname "GhostRecon")
cd $pathtogrecon
lastupdate_date=$(git log -1 --format=%cd)
lastcommitmessage=$(git log -1 --pretty=%B)²
banner

tor=false
#NEW COMMANDS
  while true
  do
  if [[ $tor == true ]]; then
    greconinput="\e[31m[\e[0mGRECON\e[31m]\e[0m(\e[1;33;5;45mTor Enabled\e[0m)\n|\n└──>\e[0m"
  elif [[ $tor == false ]]; then
    greconinput="\e[31m[\e[0mGRECON\e[31m]\e[0m\n|\n└──>"
  fi

  echo -e -n $greconinput
  read x
  if [ "$x" == "$a1" ]; then
    clear
    banner
  elif [ "$x" == "$a2" ]; then
    banner
  elif [ "$x" == "$a3" ]; then

    echo "LAST UPDATE: $lastupdate_date"


    echo -e "\n\e[1;31m[*] SEARCHING ORIGINAL DIRECTORY...\e[0m"
    cd $pathtogrecon
    echo -e "\e[1;31m[*] OK\e[0m"

    echo -e "\e[1;31m[*] UPDATE FROM GITHUB...\e[0m"
    git pull origin master
    echo -e "\e[1;31m[*] MOVING FILE...\e[0m"

    cp Grecon /usr/bin
    echo -e "\e[1;31m[*] OK\n UPDATE COMPLETED.\e[0m"
    exit
  elif [ "$x" == "$a4" ]; then
    echo ""
    cd
    cd /root/kali-anonsurf/
    anonsurf start
    newip=$(curl ifconfig.me)
    echo ""
    echo -e "\e[1;31m[*] ANONSURF ENABLED \n YOUR IP IS NOW [\e[0m\e[1;34m$newip\e[0m\e[1;31m]\e[0m"
    echo ""
    tor='true'
  elif [ "$x" == "$a5" ]; then
    echo ""
    cd
    cd /root/kali-anonsurf/
    anonsurf stop
    echo ""
    echo -e "\e[1;31m[*] ANONSURF DISABLED\e[0m"
    echo ""
    tor='false'
  elif [ "$x" == "$a6" ]; then
    echo ""
    cd
    cd /root/kali-anonsurf/
    anonsurf status
    echo ""
  elif [ "$x" == "$a7" ]; then
    quit
  elif [ "$x" == "$a8" ]; then
    $pathtogrecon/uninstall.sh
  elif [ "$x" == "$a9" ]; then
    echo $pathtogrecon
    echo ""
    echo ""
  elif [ "$x" == "$a10" ]; then
    echo ""
    echo ""
    $pathtogrecon/install-requirements.sh

    ############################################################################################################
  elif [ "$x" == "$b1" ] ||[ "$x" == "$b4" ]; then
    echo ""

    echo -e "\e[1;31m  VERSION: V.1.2 $lastupdate_date by DR34M-M4K3R\e[0m"
    echo "----------------------------------------------------------------------------"
    echo -e "last modification: $lastcommitmessage"
    echo "----------------------------------------------------------------------------"
    echo ""
  elif [ "$x" == "$b2" ]; then
    help
  elif [ "$x" == "$b3" ]; then
    help

  elif [ "$x" == "$b5" ]; then
    echo ""
    echo -e "\e[1;31m!!!!!!!!!!!!!!!!!!!!!!!\e[0m"
    echo -e "\e[1;31m!!!  WIFI REQUIRED  !!!\e[0m"
    echo -e "\e[1;31m!!!!!!!!!!!!!!!!!!!!!!!\e[0m"
    echo ""
    echo "Example: kali.org (JUST ONE DOMAIN)"
    read -p "[DOMAIN]: " domain
    echo ""
    echo "Gathering Informations...."
    echo ""
    echo -e "\e[1;31m [*] ADMIN INFO (WHOIS INFO)\e[0m"
    echo "-------------------------------------------------------------------------------"
    echo ""
    whois $domain
    echo ""
    echo -e "\e[1;31m [*] COMPLETE SCAN\e[0m"
    echo "-------------------------------------------------------------------------------"
    cd $pathtogrecon/tools
    python3 0xscan.py -d $domain
    echo ""
    echo "-------------------------------------------------------------------------------"
    echo ""
    echo -e "\e[1;31m [*] DONE\e[0m"
    echo ""
  elif [ "$x" == "$b6" ]; then
    echo ""
    echo -e "\e[1;31m!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\e[0m"
    echo -e "\e[1;31m!!!  WIFI AND SHODAN KEY REQUIRED  !!!\e[0m"
    echo -e "\e[1;31m!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\e[0m"
    echo ""
    echo "Example: 192.164.123"
    read -p "[IP ADDRESS]: " ipaddress
    echo ""
    echo "Gathering Informations...."
    echo ""
    echo -e "\e[1;31m [*] COMPLETE SCAN\e[0m"
    echo "-------------------------------------------------------------------------------"
    cd $pathtogrecon/tools
    python3 0xscan.py -d $domain
    echo ""
    echo "-------------------------------------------------------------------------------"
    echo ""
    echo -e "\e[1;31m [*] DONE\e[0m"
    echo ""
    echo -e "\e[1;31m [*] ADMIN INFO\e[0m"
    echo "-------------------------------------------------------------------------------"
    echo ""
    whois $ipaddress
    echo ""
    echo "-------------------------------------------------------------------------------"
    echo ""
    echo -e "\e[1;31m [*] SHODAN RESULTS\e[0m"
    echo "-------------------------------------------------------------------------------"
    echo ""
    shodan stats --facets vuln net:$ipaddress
    echo ""
    shodan host $ipaddress
    echo ""
    echo -e "\e[1;31m [*] DONE\e[0m"
    echo ""
  elif [ "$x" == "$b7" ]; then
    echo ""
    echo "Please Enter The Number Followed By The Dialing Code"
    echo "for example : +447410490080 / +44 Is My Dialing Code"
    read -p "Phone Number: " phone_info
    echo ""
    echo "Gathering Information..."
    echo ""
    echo -e "\e[1;31m [*] PHONE $phone_info\e[0m"
    echo "-------------------------------------------------------------------------------"
    echo ""
    cd $pathtogrecon/tools
    python3 phone_locator.py $phone_info
    echo ""
    echo ""
  elif [ "$x" == "$b8" ]; then
    echo -e "\e[0;31mWarning: after a few tries, you will be blocked. In this case, chznge your ip with 'hide identity' command.\e[0m"
    read -p "Enter target email:>" email
    echo -e -n " [\e[1;31m*\e[0m] Gathering informations..."
    jsondata=$(curl --silent emailrep.io/$email)
    #jsondata=$(cat brutjson.json)

    echo -e "\e[0;32m [OK]\e[0m"

    echo -e -n " [\e[1;31m*\e[0m] Parsing informations..."
    email_reputation=$(echo $jsondata | jq .reputation)
    email_suspicious=$(echo $jsondata | jq .suspicious)
    email_reputation=$(echo $jsondata | jq .reputation)
    email_reputationscore=$(echo $jsondata | jq .references)
    email_blacklisted=$(echo $jsondata | jq .details.blacklisted)
    email_maliciousactivity=$(echo $jsondata | jq .details.malicious_activity)
    email_recentmalicious=$(echo $jsondata | jq .details.malicious_activity_recent)
    email_credsleak=$(echo $jsondata | jq .details.credentials_leaked)
    email_databreach=$(echo $jsondata | jq .details.data_breach)
    email_firstseen=$(echo $jsondata | jq .details.first_seen)
    email_lastseen=$(echo $jsondata | jq .details.last_seen)
    email_domainexists=$(echo $jsondata | jq .details.domain_exists)
    email_domainreputation=$(echo $jsondata | jq .details.domain_reputation)
    email_newdomain=$(echo $jsondata | jq .details.new_domain)
    email_dayssincedomaincreation=$(echo $jsondata | jq .details.days_since_domain_creation)
    email_suspicioustld=$(echo $jsondata | jq .details.suspicious_tld)
    email_spam=$(echo $jsondata | jq .details.spam)
    email_freeprovider=$(echo $jsondata | jq .details.free_provider)
    email_disposable=$(echo $jsondata | jq .details.disposable)
    email_deliverable=$(echo $jsondata | jq .details.deliverable)
    email_acceptall=$(echo $jsondata | jq .details.accept_all)
    email_validmx=$(echo $jsondata | jq .details.valid_mx)
    email_primarymx=$(echo $jsondata | jq .details.primary_mx)
    email_spoofable=$(echo $jsondata | jq .details.spoofable)
    email_spf_strict=$(echo $jsondata | jq .details.spf_strict)
    email_DMARC=$(echo $jsondata | jq .details.dmarc_enforced)
    email_profiles=$(echo $jsondata | jq .details.profiles)


function booleancolor() {
  if [[ $1 == false ]]; then
    #green
    echo -e "\e[0;32m No\e[0m"
  elif [[ $1 == true ]]; then
    #red
    echo -e "\e[1;31m Yes\e[0m"
  else
    echo "$1"
  fi
}

function reversedbooleancolor() {
  if [[ $1 == true ]]; then
    #green
    echo -e "\e[0;32m Yes\e[0m"
  elif [[ $1 == false ]]; then
    #red
    echo -e "\e[1;31m No\e[0m"
  else
    echo " $1"
  fi
}

echo -e "\e[0;32m [OK]\e[0m"


     echo -e "\e[1;31m \n_____FULL REPORT_____\e[1;31m \e[0m\n"
     echo -e "-Email: |"
     booleancolor $email
     echo -n "-Suspicious: |"
     booleancolor $email_suspicious
     echo -n "-Has reputation: |"
     booleancolor $email_reputation
     echo -n "-Reputation score: "
     booleancolor $email_reputationscore
     echo -n "-Is blacklisted: |"
     booleancolor $email_blacklisted
     echo -n "-Has a malicious activity: |"
     booleancolor $email_maliciousactivity
     echo -n "-Has a recent malicious activity: |"
     booleancolor $email_recentmalicious
     echo -n "-Creditentials leaked: |"
     booleancolor $email_credsleak
     echo -n "-Is on a data breach: |"
     booleancolor $email_databreach
     echo -n "-First seen: |"
     booleancolor $email_firstseen
     echo -n "-Last seen: |"
     booleancolor $email_lastseen
     echo -n "-Domain exists: |"
     reversedbooleancolor $email_domainexists
     echo -n "-Domain reputation: |"
     booleancolor $email_domainreputation
     echo -n "-Is a new domain: |"
     booleancolor $email_newdomain
     echo -n "-Days since domain creation: |"
     booleancolor $email_dayssincedomaincreation
     echo -n "-Suspicious extention: |"
     booleancolor $email_suspicioustld
     echo -n "-Is spam: |"
     booleancolor $email_spam
     echo -n "-Free provider: |"
     booleancolor $email_freeprovider
     echo -n "-Temporary address: |"
     booleancolor $email_disposable
     echo -n "-Deliverable: |"
     reversedbooleancolor $email_deliverable
     echo -n "-Accept all: |"
     booleancolor $email_acceptall
     echo -n "-Valid MX: |"
     reversedbooleancolor $email_validmx
     echo -n "-Primary Mail Exchanger: |"
     booleancolor $email_primarymx
     echo -n "-Spoofable: |"
     booleancolor $email_spoofable
     echo -n "-Strict SPF: |"
     reversedbooleancolor $email_spf_strict
     echo -n "-DMARC (Domain-based Message Authentication, Reporting & Conformance) enforced: |"
     reversedbooleancolor $email_DMARC
     echo -n "-Profiles on social medias: |"
     booleancolor $email_profiles


  elif [ "$x" == "$b9" ]; then
    cd $pathtogrecon/tools
    python3 email_scanner.py
  elif [ "$x" == "$b10" ]; then
    echo ""
    echo "Example: kali.org"
    read -p "Enter DOMAIN: " link
    echo ""
    echo "Gathering Information..."
    echo ""
    echo -e "\e[1;31m [*] SNIFFING LINKS\e[0m"
    echo "-------------------------------------------------------------------------------"
    curl https://api.hackertarget.com/pagelinks/?q=$link
    echo ""
  elif [ "$x" == "$b11" ]; then
    echo ""
    echo -e "\e[1;31m!!!!!!!!!!!!!!!!!!!!!!!\e[0m"
    echo -e "\e[1;31m!!!  PUT IN TARGET  !!!\e[0m"
    echo -e "\e[1;31m!!!!!!!!!!!!!!!!!!!!!!!\e[0m"
    echo ""
    echo "TARGET EXAMPLE - bitcoinforcharity.com"
    read -p "Target: " bitcoin
    echo ""
    echo "Gathering Information..."
    echo ""
    echo -e "\e[1;31m [*] BITCOIN WALLET ADDRESSES\e[0m"
    echo "-------------------------------------------------------------------------------"
    cd
    cd spiderfoot/
    python3 ./sf.py -m sfp_spider,sfp_bitcoin -s $bitcoin -F BITCOIN_ADDRESS -q
    echo "-------------------------------------------------------------------------------"
    python3 ./sf.py -m sfp_spider,sfp_ethereum -s $bitcoin -F ETHEREUM_ADDRESS -q
    echo "-------------------------------------------------------------------------------"
    python3 ./sf.py -m sfp_spider,sfp_bitcoin,sfp_blockchain -s $bitcoin -F BITCOIN_ADDRESS,BITCOIN_BALANCE -q
    echo "-------------------------------------------------------------------------------"
    echo ""
  elif [ "$x" == "$b12" ]; then
    echo ""
    read -p "TARGET'S FIRST NAME > " target_firstname
    read -p "TARGET'S LAST NAME >" target_lastname
    read -p "TARGET'S STATE >" target_state
    read -p "TARGET'S CITY >" target_city
    echo -e -n "\e[1;31m [*] GENERATING LINK... \e[0m"
    if [[ -n $target_state ]]; then
      target_state="${target_state}."
    fi
    criminal_report_link="https://"$target_state"staterecords.org/search.php?firstname=$target_firstname&lastname=$target_lastname&city=$target_city"
    echo -e "\e[0;32m [OK]\e[0m"
    echo -e "\n\n \e[1;31mCTRL + click on this link to get your report: [\e[0m\e[1;34m$criminal_report_link\e[0m\e[1;31m]\e[0m"
  elif [ "$x" == "$b13" ]; then
    echo -e "
    \e[0;31mOUT OF SERVICE, JOIN THE DISCORD \nTO KNOW WHEN IT WILL BE IN SERVICE AGAIN.\e[0m
    "



    #echo -e "Choose database:
    #[1]\e[0;32m www.thatsthem.com\e[0m (10 uses per day)
    #[2]\e[0;32m  coming next...\e[0m"

    #read -p $'[\e[31m*\e[0m] CHOOSE A DATABASE >' i

    i='999'


    if [ $i == 1 ] ; then
      echo ""
      echo -e "\e[0;31m[*]: REQUIERED\e[0m"
      read -p $'[\e[31m*\e[0m] TARGET\'S FIRST NAME >' target_firstname
      read -p $'[\e[31m*\e[0m] TARGET\'S LAST NAME >' target_lastname
      #read -p "TARGET'S MAIDEN LAST NAME >" target_maiden_name
      #read -p "TARGET'S APROXIMATE AGE >" target_age
      #read -p "TARGET'S STATE >" target_state
      #read -p "TARGET'S STATE CODE (AL, UT, TX)>" target_state
      #read -p "TARGET'S EMAIL >" target_email
      #read -p "TARGET'S STREET >" target_street
      #read -p "TARGET'S CITY >" target_city
      #read -p "TARGET'S ZIP CODE >" target_zipcode
      #read -p "TARGET'S  PHONE>" target_phone
      #read -p "TARGET'S DAY OF BIRTH >" target_day_of_birth
      #read -p "TARGET'S MONTH OF BIRTH >" target_month_of_birth
      #read -p "TARGET'S YEAR OF BIRTH >" target_year_of_birth
      #read -p "TARGET'S CITY >" target_city
      #findpeoplesearch_link="https://www.findpeoplesearch.com/$target_firstname+$target_lastname/$target_age/$target_state/$target_email/$target_street/$target_city/$target_zipcode/$target_maiden_name/$target_phone/$target_month_of_birth/$target_day_of_birth/$target_year_of_birth/1/1454471185"

      echo ""
      echo -e -n "\e[1;31m [*] GENERATING REQUEST FOR DATABASE... \e[0m"
      target_firstname=${target_firstname^}
      target_lastname=${target_lastname^}
      thatsthem_link="https://thatsthem.com/name/$target_firstname-$target_lastname"
      echo -e "\e[0;32m [OK]\e[0m"
      echo -e "\n\e[1;31m[*] SEARCHING ORIGINAL DIRECTORY...\e[0m"
      cd $pathtogrecon
      # tests path(useless for you):
      #cd /media/v1ct0r/DIsque500GO/OSINT/GhostRecon
      mkdir results$target_firstname
      cd results$target_firstname
      echo -e "\e[1;31m[*] OK\e[0m"
      echo -e -n "\e[1;31m [*] REQUESTING DATABASE SERVER... \e[0m"
      curl -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4482.0 Safari/537.36 Edg/92.0.874.0" -l $thatsthem_link -o resultpage.html
      echo -e "\e[0;32m [OK]\e[0m"
      echo -e -n "\e[1;31m [*] SHAPING DATA... \e[0m"
      sed 's/<[^>]*>//g ; /^$/d' resultpage.html > resultpage.txt
      sed -i '1,108d' resultpage.txt
      sed -i '/window.addEventListener ("load", function () {/,/^\s*$/{d}' resultpage.txt
      sed -i '/window.addEventListener ("load", function () {/,/^\s*$/{d}' resultpage.txt
      sed -i '/<ins class="adsbygoogle"/,/^\s*$/{d}' resultpage.txt
      sed -i '/About Us/,/^\s*$/{d}' resultpage.txt
      sed -i '/18-24/,/^\s*$/{d}' resultpage.txt
      sed -i '/ Run Background Search/,/^\s*$/{d}' resultpage.txt
      sed -i '/ Is this you? Bulk Optout/,/^\s*$/{d}' resultpage.txt
      sed -i '/Copyright/,$d' resultpage.txt
      grep -v '^[[:space:]]*$' resultpage.txt > resultpage.txt.tmp
      mv resultpage.txt.tmp resultpage.txt

      extract_numberofresult=$(head -1 resultpage.txt)
      extract_nameoftarget=$(head -2 resultpage.txt | tail -1)
      #sed -i '1,2d' resultpage.txt
      echo $target_firstname
      awk "/$target_firstname/{if(NR!=1){for(i=0;i<j;i++)print a[i]>\"result\"k;j=0;k++;}a[j++]=\$0;next}{a[j++]=\$0;}END{for(i=0;i<j;i++)print a[i]>\"result\"k}" i=0 k=1 resultpage.txt

      #echo -e "\n$extract_numberofresult\n$extract_nameoftarget
      #_____________
      #"



      numberofresultfiles=$(ls | wc -l)
      numberofresultfiles=$numberofresultfiles-2


      for (( c=1; c<=$numberofresultfiles; c++ ))
      do
        extract_phone=$(sed  -n '/Phone Number/{n;p}' result$c | grep -wv -e Alternate)
        extract_alt_phone=$(sed  -n '/Alternate/{n;p}' result$c | grep -wv -e Email)
        extract_email=$(sed  -n '/Email/{n;p}' result$c | grep -wv -e Residence)
        extract_residencelength=$(sed  -n '/Redidence/{n;p}' result$c | grep -wv -e Size)
        extract_household_size=$(sed  -n '/Household/{n;p}' result$c | grep -wv -e IP)
        extract_ip=$(sed  -n '/IP/{n;p}' result$c | grep -wv -e Net)
        extract_net_worth=$(sed  -n '/Net/{n;p}' result$c | grep -wv -e Income)
        extract_income=$(sed  -n '/Income/{n;p}' result$c | grep -wv -e Education)
        extract_occupation=$(sed  -n '/Occupation/{n;p}' result$c | grep -wv -e Other)
        extract_language=$(sed  -n '/Language/{n;p}' result$c | grep -wv -e Wealth)
        extract_scores=$(sed -n '/Score/,$p' result$c)
        echo "
        $(head -1 result$c)
        ---------------------
        _____________   Adress   _____________
        $(sed -n '2p' result$c)
        _________   Phone Number(s)   _________
Main:        $extract_phone
Alternate:   $extract_alt_phone
       ___________   Email adress   ___________
       $extract_email
       ________   Length of Residence   ________
       $extract_residencelength
       __________   Household Size   __________
       $extract_household_size
       ___________   Ip adress   ___________
       $extract_ip
      ________   Estimated Net Worth   ________
      $extract_net_worth
      _________   Estimated Income   _________
      $extract_income
      ___________   Occupation   __________
      $extract_occupation
      ____________   Language   ____________
      $extract_language
      ____________   Scores   ____________
      $extract_scores
        "






      done

      echo -e "
       RAW RESULT FILES SAVED INTO \e[0;32m$pathtogrecon/results$target_firstname \e[0m LIMITED TO 10 SEARCH A DAY :/  . I AM WORKING ON IT"


    elif [ i == "2" ] ; then
      echo -e -n "\e[1;31m THERE WILL BE MORE DATABASE LATER \e[0m"

    fi






  else
    echo "WRONG COMMAND TRY AGAIN OR TYPE -h TO SEE THEM"
  fi
  #statements
done

#    MODULES

#    whois $whois
#    curl http://api.hackertarget.com/geoip/?q=$geoip
#    curl http://api.hackertarget.com/reverseiplookup/?q=$ip_lookup
#    curl http://api.hackertarget.com/dnslookup/?q=$DNS_LOOKUP
#    curl https://api.hackertarget.com/reversedns/?q=$reversedns
#    curl https://api.telnyx.com/anonymous/v2/number_lookup/$phone_info
#    curl https://api.hackertarget.com/bannerlookup/?q=$grab_banner
#    curl http://api.hackertarget.com/nmap/?q=$nmap_scan
#    sshscan.py -t $sshscan
#    sqlmap -u $sqlhost2  searchgetby_id.$phphtml1?id=4 --dbs --columns -D scanme --tamper=space2comment --level 5
#    msfconsole -q -x "nmap -v --script vuln $vuln_scan ;exit ;"
#    osrf alias_generator
#    mailfy -m $email_info -p all
#    osrf alias_generator
#    curl https://api.hackertarget.com/pagelinks/?q=$link_sniffer
